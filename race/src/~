import numpy as np
import cv2
import math



class SlideWindow:
	def __init(self):
		self.old_x_cur = 0	
		self.cur_list = []


	def slidewindow(self,img):
		x_location = 320
		out_img = np.dstack((img,img,img))
		height = img.shape[0]
		width = img.shape[1]

		window_height = 10
		nwindows = 10

		center_x = list()
		center_y = list()

		nonzero = img.nonzero()

		nonzeroy = np.array(nonzero[0])
		nonzerox = np.array(nonzero[1])
		
		margin = 20

		minpix = 10
		
		######################################set parameter


		#for visualize

		#left
		pts_left = np.array([[width/2 - 90, height], [width/2 -90,height - 60], [width/2-200,height-80],[width/2-200,height]],np.int32)

		cv2.polylines(out_img,[pts_left],False, (0,255,0),1)
		
		#right
		pts_right = np.array([[width/2 + 60, height], [width/2+60, height - 80],[width/2 + 190,height - 110],[width/2+ 190, height]],np.int32)

		cv2.polylines(out_img,[pts_right],False,(255,0,0),1)




		######################################detect line


		good_left_inds = ((nonzerox >= width/2 - 130) & (nonzeroy >= nonzerox * 0.33+260) & (nonzerox <= width/2 - 95)).nonzero()[0]

		good_right_inds = ((nonzerox >= width/2 + 20) & (nonzeroy >= nonzerox * (-0.48) + 460) & (nonzerox <= width/2 + 120)).nonzero()[0]



		#####################################





		if len(good_left_inds) > minpix:
			line_flag = 1
			x_current = np.int(np.mean(nonzerox[good_left_inds]))
			y_current = np.int(np.mean(nonzeroy[good_left_inds]))
		elif len(good_right_inds) > minpix:
			line_flag = 2
			x_current = nonzero[good_right_inds[np.argmax(nonzeroy[good_right_inds])]]
			y_current = np.int(np.max(nonzeroy[good_right_inds]))
		else: line_flag = 3

		################################### find detect logic

	
		if line_flag != 3:
			# find line least 1
			for window in range(nwindows):
				if line_flag == 1:   #left lane found
					y_low = y_current - (window + 1) * window_height
					y_high = y_current - window*window_height
					
					x_left = x_current - margin
					x_right = x_current + margin

					cv2.rectangle(out_img, (x_left,y_low),(x_right,y_high),(0,255,0),1)
					good_left_inds = ((nonzeroy >= y_low) & (nonzeroy <y_high) & (nonzerox >=x_left) & (nonzerox < x_right)).nonzero()[0]
					

					if len(good_left_inds) > minpix:
						x_current = np.int(np.mean(nonzerox[good_left_inds]))
						print('findleft and minpix mode')
						self.old_x_cur = x_current

					else:
						x_current = self.old_x_cur
						print('findleft and old mode')


				if line_flag == 2:
					

					y_low = y_current - (window+1) * window_height
					y_high = y_current - window* window_height

					x_left = x_current -margin
					x_right = x_current + margin


					cv2.rectangle(out_img, (x_left, y_low),(w_right,y_high),(255,0,0),1)

					good_right_inds = ((nonzeroy >=y_low) & (nonzeroy < y_high) & (nonzerox > x_left) & (nonzerox < x_right)).nonzero()[0]


					if len(good_right_inds) > minpix:
						x_current = np.int(np.mane(nonzerox[good_right_inds]))
						print('find Right and minpix mode')
						self.old_x_cur = x_current	

					else:
						x_current = self.old_x_cur
						print('find Right and old mode')
				
			




		else:
			x_currnet = self.old_x_cur
			print('lane not found')


		

		
		if line_flag == 1:
			x_location = x_currnet + 120

		elif line_flag == 2:
			x_location = x_current - 120


		else:
			if x_currnet < width / 2:
				x_location = x_current + 120
			else:
				x_location = x_current - 120


		
		return out_img, x_location, line_flag
